{"version":3,"sources":["components/ViralCharts.js","components/ViralCard.js","App.js","serviceWorker.js","index.js"],"names":["ViralMapChart","className","chartType","data","this","props","mapData","options","region","colorAxis","colors","backgroundColor","datalessRegionColor","defaultColor","displayMode","resolution","rootProps","React","Component","ViralBarChart","barData","hAxis","title","minValue","bars","legend","position","tabListKeys","key","tab","sortedOfficial","OfficialData","shift","sort","a","b","unshift","sortedUnofficial","UnofficialData","tabListInfo","official","stimate","ViralCard","state","onTabChange","type","console","log","setState","style","width","tabList","activeTabKey","Header","Layout","Footer","Content","Text","Typography","App","align","justify","xs","sm","md","lg","direction","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c6d0c8ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nexport class ViralMapChart extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Chart\r\n          className={\"mapChart\"}\r\n          chartType=\"GeoChart\"\r\n          data={this.props.mapData}\r\n          options={{\r\n            region: \"NI\", // Nicaragua\r\n            colorAxis: { colors: [\"#fce9eb\", \"#c53745\"] },\r\n            backgroundColor: \"#fff\",\r\n            datalessRegionColor: \"#fff\",\r\n            defaultColor: \"#fff\",\r\n            displayMode: \"regions\",\r\n            resolution: \"provinces\",\r\n          }}\r\n          // Note: you will need to get a mapsApiKey for your project.\r\n          // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\r\n          //mapsApiKey=\"YOUR_KEY_HERE\"\r\n          rootProps={{ \"data-testid\": \"1\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class ViralBarChart extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Chart\r\n\r\n          className={\"barChart\"}\r\n          chartType=\"Bar\"\r\n          data={this.props.barData}\r\n          options={{\r\n            colors: [\"#c53745\"],\r\n            hAxis: {\r\n              title: \"Casos Totales\",\r\n              minValue: 0,\r\n            },\r\n            bars: \"horizontal\",\r\n            legend: {position: 'none'}\r\n          }}\r\n          rootProps={{ \"data-testid\": \"2\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { ViralMapChart, ViralBarChart } from \"./ViralCharts\";\r\n\r\nimport UnofficialData from \"./data/UnofficialData.json\";\r\nimport OfficialData from \"./data/OfficialData.json\";\r\n\r\nconst tabListKeys = [\r\n  {\r\n    key: \"official\",\r\n    tab: \"Casos Oficiales\",\r\n  },\r\n  {\r\n    key: \"stimate\",\r\n    tab: \"Casos No Oficiales\",\r\n  },\r\n];\r\n\r\nvar sortedOfficial = OfficialData;\r\nsortedOfficial.shift();\r\nsortedOfficial.sort((a,b) => b[1] - a[1]);\r\nsortedOfficial.unshift([\"\", \"Casos\"]);\r\n\r\n\r\nvar sortedUnofficial = UnofficialData;\r\nsortedUnofficial.shift();\r\nsortedUnofficial.sort((a,b) => b[1] - a[1]);\r\nsortedUnofficial.unshift([\"\", \"Casos\"]);\r\n\r\nconst tabListInfo = {\r\n  official: (\r\n    <>\r\n      <ViralMapChart mapData={OfficialData} />\r\n      <ViralBarChart barData={sortedOfficial} />\r\n    </>\r\n  ),\r\n  stimate: (\r\n    <>\r\n      <ViralMapChart mapData={UnofficialData} />\r\n      <ViralBarChart barData={sortedUnofficial} />\r\n    </>\r\n  ),\r\n};\r\n\r\nexport class ViralCard extends React.Component {\r\n  state = {\r\n    key: \"official\",\r\n  };\r\n\r\n  onTabChange = (key, type) => {\r\n    console.log(key, type);\r\n    this.setState({ [type]: key });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card\r\n          style={{ width: \"100%\" }}\r\n          tabList={tabListKeys}\r\n          activeTabKey={this.state.key}\r\n          onTabChange={(key) => {\r\n            this.onTabChange(key, \"key\");\r\n          }}\r\n        >\r\n          {tabListInfo[this.state.key]}\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { Layout, Space, Row, Col, Typography } from \"antd\";\nimport { ViralCard } from \"./components/ViralCard.js\";\nimport \"./App.css\";\n\nconst { Header, Footer, Content } = Layout;\nconst { Text } = Typography;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header>\n          <Space align=\"center\">Covid-19 en Nicaragua</Space>\n        </Header>\n        <Content>\n          <Row justify=\"center\">\n            <Col xs={24} sm={22} md={19} lg={17}>\n              <ViralCard />\n            </Col>\n          </Row>\n        </Content>\n        <Footer>\n          <Space direction=\"vertical\">\n            <h2>Fuentes</h2>\n            <Space align=\"start\" direction=\"vertical\">\n              <h3>Fuentes Oficiales</h3>\n              <Text>\n                La informacion de fuentes oficiales proviene directamente de la\n                informacion proveida por el Ministerio de Salud Nicaraguense\n                (Minsa).\n                <br/>\n                <a href=\"http://www.minsa.gob.ni/\">Sitio oficial del MINSA</a>\n              </Text>\n              <h3>Fuentes No Oficiales</h3>\n              <Text>\n                La informacion de fuentes no oficiales proviene de los reportes\n                semanales proveidos por el Observatorio Ciudadano COVID-19.\n                <br/>\n                <a href=\"https://twitter.com/observatorioni\">Observatorio Ciudadano</a>\n              </Text>\n            </Space>\n          </Space>\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}